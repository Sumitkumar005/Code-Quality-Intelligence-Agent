[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cqia-backend"
version = "2.0.0"
description = "Code Quality Intelligence Agent - Backend API"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "CQIA Team", email = "team@cqia.dev"}
]
maintainers = [
    {name = "CQIA Team", email = "team@cqia.dev"}
]
keywords = ["code-quality", "analysis", "ai", "fastapi", "python"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "gunicorn==21.2.0",
    "sqlalchemy==2.0.23",
    "alembic==1.12.1",
    "psycopg2-binary==2.9.9",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "python-multipart==0.0.6",
    "celery==5.3.4",
    "redis==5.0.1",
    "httpx==0.25.2",
    "aiohttp==3.9.1",
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",
    "python-dotenv==1.0.0",
    "structlog==23.2.0",
    "tree-sitter==0.20.4",
    "tree-sitter-python==0.20.3",
    "tree-sitter-javascript==0.20.3",
    "tree-sitter-typescript==0.20.3",
    "tree-sitter-java==0.20.2",
    "tree-sitter-go==0.20.1",
    "tree-sitter-rust==0.20.1",
    "tree-sitter-c-sharp==0.20.1",
    "tree-sitter-php==0.20.1",
    "langchain==0.1.0",
    "langchain-community==0.0.10",
    "langchain-openai==0.0.2",
    "langchain-anthropic==0.0.2",
    "chromadb==0.4.18",
    "sentence-transformers==2.2.2",
    "torch==2.1.1",
    "transformers==4.35.2",
    "tokenizers==0.15.0",
    "GitPython==3.1.40",
    "pygithub==2.1.1",
    "python-gitlab==4.2.0",
    "reportlab==4.0.7",
    "weasyprint==60.2",
    "jinja2==3.1.2",
    "smtplib3==1.0.0",
    "click==8.1.7",
    "rich==13.7.0",
    "typer==0.9.0",
    "pathlib2==2.3.7-snapshot",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-mock==3.12.0",
    "pytest-cov==4.1.0",
    "pytest-xdist==3.5.0",
    "pytest-html==4.1.1",
    "pytest-benchmark==4.0.0",
    "black==23.11.0",
    "isort==5.12.0",
    "flake8==6.1.0",
    "flake8-bandit==4.1.1",
    "flake8-black==0.3.6",
    "flake8-isort==6.1.0",
    "mypy==1.7.1",
    "pre-commit==3.5.0",
    "ipdb==0.13.13",
    "pdbpp==0.10.3",
    "memory-profiler==0.61.0",
    "line-profiler==4.1.2",
    "sqlalchemy-utils==0.41.1",
    "mkdocs==1.5.3",
    "mkdocs-material==9.4.8",
    "mkdocs-autorefs==0.5.0",
    "mkdocstrings==0.20.0",
    "mkdocstrings-python==1.7.5",
    "jupyter==1.0.0",
    "ipykernel==6.26.0",
    "matplotlib==3.8.2",
    "pandas==2.1.4",
    "seaborn==0.13.0",
    "commitizen==3.13.0",
    "py-spy==0.3.14",
    "scalene==1.5.34",
    "bandit==1.7.5",
    "safety==2.4.0b1",
    "docker==6.1.3",
    "docker-compose==1.29.2",
    "watchdog==3.0.0",
    "livereload==2.6.3",
]
test = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-mock==3.12.0",
    "pytest-cov==4.1.0",
    "pytest-xdist==3.5.0",
    "pytest-html==4.1.1",
    "pytest-benchmark==4.0.0",
    "httpx==0.25.2",
    "requests==2.31.0",
]
docs = [
    "mkdocs==1.5.3",
    "mkdocs-material==9.4.8",
    "mkdocs-autorefs==0.5.0",
    "mkdocstrings==0.20.0",
    "mkdocstrings-python==1.7.5",
]

[project.scripts]
cqia = "app.cli:main"
cqia-cli = "app.cli:main"

[project.urls]
Homepage = "https://github.com/cqia/cqia"
Documentation = "https://docs.cqia.dev"
Repository = "https://github.com/cqia/cqia"
Issues = "https://github.com/cqia/cqia/issues"
Changelog = "https://github.com/cqia/cqia/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["app", "app.api", "app.api.v1", "app.api.v1.endpoints", "app.api.v1.schemas", "app.core", "app.models", "app.services", "app.services.auth", "app.services.analysis", "app.services.ai", "app.services.git", "app.services.reports", "app.services.storage", "app.services.notifications", "app.utils", "app.tasks", "app.db"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tree_sitter.*",
    "chromadb.*",
    "sentence_transformers.*",
    "torch.*",
    "transformers.*",
    "tokenizers.*",
    "weasyprint.*",
    "reportlab.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "app/main.py",
    "app/cli.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
